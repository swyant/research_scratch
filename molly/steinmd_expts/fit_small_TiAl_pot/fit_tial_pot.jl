using PotentialLearning, InteratomicPotentials 
using Unitful, AtomsBase

cd("./fit_small_TiAl_pot")

function energy_to_quantity(e::Energy)
    eunit = e.u 
    e_quant = e.d * eunit
    e_quant
end

function subtract_eref!(ds, eref_dict)
    for config in ds
        sys = get_system(config)
        init_energy = energy_to_quantity(get_energy(config))

        atomic_energies = 0.0u"eV"

        elems = atomic_symbol(sys)
        for elem in elems
            atomic_energies += eref_dict[elem]
        end
        
        # This seems like a very stupid way to have to manipulate energies
        final_energy_q = init_energy - atomic_energies # Unitful.Quantity
        final_energy = Energy(ustrip(final_energy_q), unit(final_energy_q))

        config.data[Energy] = final_energy 
    end 
end

ds_path = "./TiAl_tutorial_cleaned.xyz"

ds = load_data(ds_path, ExtXYZ(u"eV", u"Å"))
Eref = Dict(:Ti => -1586.0195u"eV", :Al => -105.5954u"eV")

subtract_eref!(ds, Eref)

ace = ACE(species           = [:Ti, :Al],
          body_order        = 3, 
          polynomial_degree = 6,
          wL                = 1.5,
          csp               = 1.0,
          r0                = 2.9,
          rcutoff           = 5.5 )

e_descr_train = compute_local_descriptors(ds,ace)
f_descr_train = compute_force_descriptors(ds, ace)
ds_full = DataSet(ds .+ e_descr_train .+ f_descr_train)

lb_ref = LBasisPotential(ace)
lb_ref, Σ = learn!(lb_ref, ds_full, 1e-6)

orig_coeffs = [0.025591381519026762, 0.03527125788791906, 0.030612348271342734, 0.06646319273427727, -0.007326117584533097, 0.0021476223879284516, 0.007005564677788114, 0.007769244005502122, 0.0033019143419533176, -0.024266397752728517, -0.03511058549188825, -0.004486106026460792, 0.07649832144216986, -0.017295005584346018, 0.0348519410800185, -0.0026935081045876344, -0.0036996351104090115, 0.04250332320742131, -0.06611126598243479, 0.07452744399669442, -0.08807382022058645, 0.006553101218837121, -0.02825330387435087, -0.005070437887508557, 0.017488241826946662, -0.041461388491636234, -0.050152804966179194, 0.014554551186620662, 0.005494466857846328, 0.03395869840669037, -0.12004390275966798, 0.07758118243125994, 0.024624168020804672, 0.0006581992277555695, -0.002196641935532242, 0.03231551745953874, 0.0005431753297032715, 0.009602374511533056, 0.028907266845791348, 0.03557855646347803, 0.000832998634326787, 0.019238505326450918, -0.007863457928993406, 0.03497657242548427, -0.058485491203844206, -0.025527625067137013, -0.003851837725125408, 0.019472633328804008, -0.04975455754968226, 0.008243807089528446, 0.020612783411412677, -0.07411984524326856, 0.007005564677788615, 0.0077692440055020795, 0.003301914341951156, -0.024266397752728874, -0.03511058549188732, -0.004486106026461139, 0.004050167320520888, 0.011275083723136878, -0.009533633282696359, -0.016652089366136488, 0.005947187981081792, -0.0086386178798077, 0.027556838876613178, -0.01794755394550558, 0.0328518497817209, -0.0444008944069233, -0.04142464521909121, 0.014939466653767677, -0.0013061815492572404, -0.008399904141687925, -0.013070571180237286, 0.07022679858374972, 0.03655463426663164, -0.02425878114877371, -0.013089322405632224, 0.007663504514768707, -0.0006932536563853398, -0.015392489165582057, -0.005333834581033578, 0.000966860983206308, -0.06259246382383571, 0.04896321372972445, -0.012976299346956766, 0.00575471543255263, -0.010710826925328487, 0.009130893987440367, 0.025455356200891677, 0.03737467186835743, -0.061410072131176816, 0.05891873535070835, 0.02179281899408886, 0.02640823532251172, 0.0002904232787473565, -0.028649695323579742, -0.018788426151163752, -0.004911376520223526, 0.034242726688142995, -0.008960425717451335, -0.04627434272845332, 0.05321984323617818, 0.013802856612787245, 0.023560957961937884]

orig_lb = LBasisPotential(orig_coeffs,[0.0],ace)

### Current default

f_ref = get_all_forces(ds_full)
f_orig_pred = get_all_forces(ds_full,orig_lb)
f_train_mae, f_train_rmse, f_train_rsq = calc_metrics(f_orig_pred, f_ref)
# (0.28855631043953883, 0.4743917418018139, 0.9795763651378643)

e_ref = get_all_energies(ds_full)
e_orig_pred = get_all_energies(ds_full,orig_lb)
e_train_mae, e_train_rmse, e_train_rsq = calc_metrics(e_orig_pred, e_ref)
# (4539.507486323381, 15509.59580421581, -0.09280642108983073)

